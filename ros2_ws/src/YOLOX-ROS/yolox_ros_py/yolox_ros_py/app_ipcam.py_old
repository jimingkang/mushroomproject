#!/usr/bin/env python
from importlib import import_module
import os
from flask import Flask, render_template, Response, jsonify,Request
from flask_mqtt import Mqtt
import redis
# import camera driver
if os.environ.get('CAMERA'):
    Camera = import_module('camera_' + os.environ['CAMERA']).Camera
else:
    #from camera_pi import Camera
    from camera_ipcam import Camera
    #from camera_usb import Camera
    #from camera_det_rs import Camera
    #from camera_v4l2 import Camera

# Raspberry Pi camera module (requires picamera package)
#from camera_pi import Camera

broker=''
redis_server=''
try:
    for line in open("../ip.txt"):
        if line[0:6] == "broker":
            broker = line[9:len(line)-1]
        if line[0:6] == "reddis":
            redis_server=line[9:len(line)-1]
except:
    pass
print(broker+" "+redis_server)
print(broker)
app = Flask(__name__)
app.config['MQTT_BROKER_URL'] = broker 
#app.config['MQTT_BROKER_URL'] =  '192.168.254.42'
app.config['MQTT_BROKER_PORT'] = 1883
app.config['MQTT_USERNAME'] = ''  # Set this item when you need to verify username and password
app.config['MQTT_PASSWORD'] = ''  # Set this item when you need to verify username and password
app.config['MQTT_KEEPALIVE'] = 5  # Set KeepAlive time in seconds
app.config['MQTT_TLS_ENABLED'] = False  # If your server supports TLS, set it True
topic = '/flask/mqtt'
topic2 = '/flask/xyz'
topic3 = '/flask/serial'
mqtt_client = Mqtt(app)
pool = redis.ConnectionPool(host=redis_server, port=6379, decode_responses=True,password='jimmy')
r = redis.Redis(connection_pool=pool)


@mqtt_client.on_connect()
def handle_connect(client, userdata, flags, rc):
    if rc == 0:
        print('ip Connected successfully')
        mqtt_client.subscribe(topic)  # subscribe topic
    else:
        print('Bad connection. Code:', rc)

ip=''
@mqtt_client.on_message()
def handle_mqtt_message(client, userdata, message):
    if message.topic == topic:
        data = dict(
            topic=message.topic,
            payload=message.payload.decode()
        )
        print('Received message on topic: {topic} with payload: {payload}'.format(**data))
        global ip
        ip = data['payload']
        print("payloadip=" + ip)

@app.route('/',methods=['GET', 'POST'])
def index():
    #global ip
    #ip=request.form['ip']
    """Video streaming home page."""
    return render_template('index.html')

@app.route('/update_mushroom_map' ,methods=['GET'])
def update_mushroom_map():
    detections=r.hgetall("detections")
    print(jsonify({"response":detections}))
    return jsonify({"response":detections})

def gen(camera):
    """Video streaming generator function."""
    yield b'--frame\r\n'
    while True:
        frame = camera.get_frame()
        yield b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n--frame\r\n'

ip=''
@app.route('/video_feed')
def video_feed():
    """Video streaming route. Put this in the src attribute of an img tag."""
    global ip
    return Response(gen(Camera()),
                    mimetype='multipart/x-mixed-replace; boundary=frame')


if __name__ == '__main__':
    app.run(host='0.0.0.0',port=5001, threaded=True)
